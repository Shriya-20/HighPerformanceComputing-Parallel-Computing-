1.

#include <mpi.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_WORD_LENGTH 100

int main(int argc, char** argv) {
    int rank, size;
    char word[MAX_WORD_LENGTH];
    char toggled_word[MAX_WORD_LENGTH];
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != 2) {
        fprintf(stderr, "This program requires exactly two processes.\n");
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    if (rank == 0) {
        // Sender process
        // printf("Enter a word: ");
        fgets(word, MAX_WORD_LENGTH, stdin);
        word[strcspn(word, "\n")] = '\0'; // Remove newline character

        MPI_Ssend(word, strlen(word) + 1, MPI_CHAR, 1, 0, MPI_COMM_WORLD);
        MPI_Recv(toggled_word, MAX_WORD_LENGTH, MPI_CHAR, 1, 0, MPI_COMM_WORLD, &status);

        printf("Received word: %s\n", toggled_word);
    } else {
        // Receiver process
        MPI_Recv(word, MAX_WORD_LENGTH, MPI_CHAR, 0, 0, MPI_COMM_WORLD, &status);

        // Toggle the case of each letter
        for (int i = 0; word[i] != '\0'; i++) {
            toggled_word[i] = islower(word[i]) ? toupper(word[i]) : tolower(word[i]);
        }
        toggled_word[strlen(word)] = '\0';

        MPI_Ssend(toggled_word, strlen(toggled_word) + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}



2.

#include <stdio.h>
#include <mpi.h>

int main(int argc, char* argv[]) {
    int rank, size, number;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        // Master process
        printf("Master (process 0) sending numbers to slaves...\n");
        for (int dest = 1; dest < size; dest++) {
            number = dest * 10; // Sending different numbers to each slave
            MPI_Send(&number, 1, MPI_INT, dest, 0, MPI_COMM_WORLD);
            printf("Sent number %d to process %d\n", number, dest);
        }
    } else {
        // Slave processes
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        printf("Received number %d in process %d\n", number, rank);
    }

    MPI_Finalize();
    return 0;
}


q3.

#include <mpi.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

int main(int argc, char** argv) {
    MPI_Init(NULL, NULL);
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    int numbers[5] = { 1, 2, 3, 4 }; // Example array
    int number;

    // Initialize MPI buffer for buffered send
    int buffer_size = 5 * sizeof(int) + MPI_BSEND_OVERHEAD;
    void* buffer = (void*)malloc(buffer_size);
    MPI_Buffer_attach(buffer, buffer_size);

    if (world_rank == 0) {
        for (int i = 1; i < world_size; i++) {
            MPI_Bsend(&numbers[i - 1], 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
    } else {
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        if (world_rank % 2 == 0) {
            printf("Process %d received number %d. Its square is %d\n",
                world_rank, number, number * number);
        } else {
            printf("Process %d received number %d. Its cube is %d\n",
                world_rank, number, number * number * number);
        }
    }

    // Detach and free the buffer after use
    MPI_Buffer_detach(&buffer, &buffer_size);
    free(buffer);

    MPI_Finalize();
    return 0;
}



q4.


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char* argv[]) {
    int rank, size;
    int value = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size < 2) {
        printf("This program requires at least 2 processes.\n");
        MPI_Finalize();
        return EXIT_FAILURE;
    }

    if (rank == 0) {
        // Root process reads an integer value
        printf("Enter an integer value: ");
        scanf("%d", &value);
        printf("Root process (rank 0) read value: %d\n", value);
    }

    // Increment value by one
    value++;

    // Send and receive value in a ring manner
    MPI_Send(&value, 1, MPI_INT, (rank + 1) % size, 0, MPI_COMM_WORLD);
    MPI_Recv(&value, 1, MPI_INT, (rank - 1 + size) % size, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

    if (rank == 0) {
        printf("Root process received value after ring communication: %d\n", value);
    }

    MPI_Finalize();
    return EXIT_SUCCESS;
}



q5.



